Binary search trees are a special case of a bianary tree
1.they atmost have 2 children per node
2.they are sorted in a particular way,they are kept in an order
3.they can be used to store data that can be copmared
4.every node to the left of a parent node is always less than the parent
5.every node to the right of a parent node is always greater than a parent

/*
Inserting a node
steps -iteratively or recursively
1.create a new node
2.starting at the root
    1.check if there is a root,if not -the root now becomes that new node!
    2.if there is a root,check if the value of the new node is greater than or 
      less than the value of the root
    3.if it is greater
        1.ceck to see if there is a node to the right 
            1.if there is,move to that node and repeat these steps
            2.if there is not,add that node as the right property
    4.if it is less
        1.check to see if there is a node to the left
            1.if there is,move to that node and repeat these steps
            2.if there is not,add that node as the left property

*/

/*
Finding a node in a bst
steps iteratively or recursively
1.starting with the root component
  1.check if there is a root,if not -we're done searching!
  2.if there is a root,check if the value of the new node is the value
    we're looking for.if we found it we're done!
  3.if not,check to see if the value is greater than or less than the value
    of the root
  4.if it is greater
    1.check to see if there is a node to the right
      1.if there is,move to that node and repeat these steps
      2.if there is not,we're done searching!
  5.if it is less
    1.check to see if there is a node to the left
      1.if there is,move to that node and repeat these steps
      1.if there is not,we're done searching!

*/

Big O 
 (for best and average cases)

 insertion - O(log n)
 Searching - O(log n)
 [note: we only increase the number of steps to insert/find by 1]